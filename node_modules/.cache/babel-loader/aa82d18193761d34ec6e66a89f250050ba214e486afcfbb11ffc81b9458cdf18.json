{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nvar _excluded = [\"url\", \"method\", \"data\", \"params\", \"headers\"];\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { createApi, retry } from '@reduxjs/toolkit/query/react';\nimport createAxiosInstance from './axiosInstance';\nimport { urlTemplates } from './urls';\nimport config from 'utils/config';\n\n// Create separate Axios instances for api and feeds\nvar apiAxiosInstance = createAxiosInstance(process.env.API_BASE_URL);\nvar feedsAxiosInstance = createAxiosInstance(process.env.FEEDS_BASE_URL);\nvar axiosBaseQuery = function axiosBaseQuery(axiosInstance) {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n      var url, method, data, params, headers, rest, result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            url = _ref.url, method = _ref.method, data = _ref.data, params = _ref.params, headers = _ref.headers, rest = _objectWithoutProperties(_ref, _excluded);\n            _context.prev = 1;\n            _context.next = 4;\n            return axiosInstance(_objectSpread({\n              url: url,\n              method: method,\n              data: data,\n              params: params\n            }, rest));\n          case 4:\n            result = _context.sent;\n            return _context.abrupt(\"return\", {\n              data: result.data\n            });\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](1);\n            return _context.abrupt(\"return\", {\n              error: _objectSpread({}, _context.t0 === null || _context.t0 === void 0 ? void 0 : _context.t0.data)\n            });\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[1, 8]]);\n    }));\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\nvar baseQueryWithRetry = function baseQueryWithRetry(axiosInstance) {\n  return retry(axiosBaseQuery(axiosInstance), {\n    maxRetries: 0\n  });\n};\n\n// Create separate base queries with retry for api and feeds\nvar apiBaseQueryWithRetry = baseQueryWithRetry(apiAxiosInstance);\nvar feedsBaseQueryWithRetry = baseQueryWithRetry(feedsAxiosInstance);\n\n// Create separate API instances for api and feeds\nexport var api = createApi({\n  reducerPath: 'apis',\n  baseQuery: apiBaseQueryWithRetry,\n  endpoints: function endpoints(builder) {\n    return {\n      // Endpoint for fan login\n      fanLogin: builder.mutation({\n        query: function query(platformId) {\n          return {\n            url: urlTemplates === null || urlTemplates === void 0 ? void 0 : urlTemplates.fanLogin,\n            method: 'POST',\n            data: {\n              platformId: config.platformId\n            },\n            params: {\n              backdoor: 'horcrux'\n            }\n          };\n        }\n      }),\n      // Endpoint for media login\n      mediaLogin: builder.mutation({\n        query: function query(_ref3) {\n          var platformId = _ref3.platformId,\n            businessName = _ref3.businessName,\n            mediaCode = _ref3.mediaCode,\n            emailId = _ref3.emailId;\n          return {\n            url: urlTemplates === null || urlTemplates === void 0 ? void 0 : urlTemplates.mediaLogin,\n            method: 'POST',\n            data: {\n              platformId: platformId,\n              businessName: businessName,\n              mediaCode: mediaCode,\n              emailId: emailId\n            },\n            params: {\n              backdoor: 'horcrux'\n            }\n          };\n        }\n      }),\n      // Endpoint for federation login\n      federationLogin: builder.mutation({\n        query: function query(_ref4) {\n          var platformId = _ref4.platformId,\n            countryToken = _ref4.countryToken;\n          return {\n            url: urlTemplates === null || urlTemplates === void 0 ? void 0 : urlTemplates.federationLogin,\n            method: 'POST',\n            data: {\n              platformId: platformId,\n              countryToken: countryToken\n            },\n            params: {\n              backdoor: 'horcrux'\n            }\n          };\n        }\n      }),\n      //submit vote\n      submitVote: builder.mutation({\n        query: function query(_ref5) {\n          var playerId = _ref5.playerId,\n            playerCategory = _ref5.playerCategory;\n          return {\n            url: urlTemplates === null || urlTemplates === void 0 ? void 0 : urlTemplates.submitVote,\n            method: 'POST',\n            data: {\n              playerId: playerId,\n              playerCategory: playerCategory\n            },\n            params: {\n              backdoor: 'horcrux'\n            }\n          };\n        }\n      }),\n      // Endpoint for getting votes\n      getVotes: builder.query({\n        query: function query(guid) {\n          var _urlTemplates$getVote;\n          return {\n            url: urlTemplates === null || urlTemplates === void 0 || (_urlTemplates$getVote = urlTemplates.getVotes) === null || _urlTemplates$getVote === void 0 ? void 0 : _urlTemplates$getVote.replace('{{guid}}', guid),\n            method: 'GET',\n            params: {\n              optType: config.optType,\n              backdoor: 'horcrux'\n            }\n          };\n        }\n      }),\n      // Endpoint for getting results\n      getResults: builder.query({\n        query: function query(guid) {\n          var _urlTemplates$getResu;\n          return {\n            url: urlTemplates === null || urlTemplates === void 0 || (_urlTemplates$getResu = urlTemplates.getResults) === null || _urlTemplates$getResu === void 0 ? void 0 : _urlTemplates$getResu.replace('{{guid}}', guid),\n            method: 'GET',\n            params: {\n              backdoor: 'horcrux'\n            }\n          };\n        }\n      })\n    };\n  },\n  // keepUnusedDataFor: 10000000000000,\n  refetchOnReconnect: true\n});\nexport var feeds = createApi({\n  reducerPath: 'feeds',\n  baseQuery: feedsBaseQueryWithRetry,\n  endpoints: function endpoints() {\n    return {};\n  },\n  keepUnusedDataFor: 1000000000000,\n  refetchOnReconnect: true\n});\nvar useFanLoginMutation = api.useFanLoginMutation,\n  useMediaLoginMutation = api.useMediaLoginMutation,\n  useFederationLoginMutation = api.useFederationLoginMutation,\n  useSubmitVoteMutation = api.useSubmitVoteMutation,\n  useGetVotesQuery = api.useGetVotesQuery,\n  useGetResultsQuery = api.useGetResultsQuery;\nexport { useFanLoginMutation, useMediaLoginMutation, useFederationLoginMutation, useSubmitVoteMutation, useGetVotesQuery, useGetResultsQuery };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}