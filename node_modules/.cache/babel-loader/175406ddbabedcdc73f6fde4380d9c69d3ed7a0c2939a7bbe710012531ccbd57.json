{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _typeof from \"@babel/runtime/helpers/typeof\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { TRANSLATIONS_KEY } from './constants';\n\n/* \n    Returns the translation for the given key.\n    If the translation is not found, the defaultValue is returned.\n*/\nexport var getTranslations = function getTranslations(key, defaultValue) {\n  var _translation$key;\n  var translation = window[TRANSLATIONS_KEY];\n  return (_translation$key = translation[key]) !== null && _translation$key !== void 0 ? _translation$key : defaultValue;\n};\nexport var getToken = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var _window, token;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return (_window = window) === null || _window === void 0 ? void 0 : _window.getAuthInfo();\n        case 3:\n          token = _context.sent;\n          return _context.abrupt(\"return\", token === null || token === void 0 ? void 0 : token.idToken);\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(\"err\", _context.t0);\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[0, 7]]);\n  }));\n  return function getToken() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\n/* \n    Replaces the placeholders in the given string with the values from the given object.\n */\nvar _replacePlaceholder = function replacePlaceholder(input, replaceObj) {\n  var pattern = /\\{([^}]+)\\}/g;\n  function replacer(str) {\n    return str.replace(pattern, function (match, key) {\n      return replaceObj.hasOwnProperty(key) ? replaceObj[key] : match;\n    });\n  }\n  if (typeof input === 'string') {\n    return replacer(input);\n  }\n  if (Array.isArray(input)) {\n    return input.map(function (item) {\n      if (typeof item === 'string') {\n        return replacer(item);\n      }\n      if (_typeof(item) === 'object' && item !== null) {\n        return _replacePlaceholder(item, replaceObj);\n      }\n      return item;\n    });\n  }\n  if (_typeof(input) === 'object' && input !== null) {\n    return Object.keys(input).reduce(function (acc, key) {\n      if (typeof input[key] === 'string') {\n        acc[key] = replacer(input[key]);\n      } else if (_typeof(input[key]) === 'object') {\n        acc[key] = _replacePlaceholder(input[key], replaceObj);\n      } else {\n        acc[key] = input[key];\n      }\n      return acc;\n    }, {});\n  }\n  return input;\n};\nexport { _replacePlaceholder as replacePlaceholder };\nexport var getCurrentRoute = function getCurrentRoute(pathname) {\n  var routeParts = pathname.split('/');\n  return routeParts[routeParts.length - 1];\n};\nexport var serialize = function serialize(data) {\n  if (!data) return;\n  return typeof data === 'string' ? data : JSON.stringify(data);\n};\nexport var setCookie = function setCookie(name, value, days) {\n  var expires = \"\";\n  if (days) {\n    var date = new Date();\n    date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);\n    expires = \"; expires=\" + date.toUTCString();\n  }\n  document.cookie = \"\".concat(name, \"=\").concat(value || \"\").concat(expires, \"; path=/\");\n};\nexport var getCookie = function getCookie(name) {\n  var value = \"; \".concat(document.cookie);\n  var parts = value.split(\"; \".concat(name, \"=\"));\n  if (parts.length === 2) return parts.pop().split(';').shift();\n};\nexport var removeCookie = function removeCookie(name) {\n  document.cookie = \"\".concat(name, \"=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;\");\n};\nexport var formatDate = function formatDate(date) {\n  if (!date) return '';\n  var _date$split = date === null || date === void 0 ? void 0 : date.split('-'),\n    _date$split2 = _slicedToArray(_date$split, 3),\n    day = _date$split2[0],\n    month = _date$split2[1],\n    year = _date$split2[2];\n  var dateObj = new Date(\"\".concat(year, \"-\").concat(month, \"-\").concat(day));\n  var options = {\n    day: '2-digit',\n    month: 'short',\n    year: 'numeric'\n  };\n  var formattedDate = dateObj === null || dateObj === void 0 ? void 0 : dateObj.toLocaleDateString('en-GB', options);\n  return formattedDate === null || formattedDate === void 0 ? void 0 : formattedDate.toUpperCase();\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}